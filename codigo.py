# -*- coding: utf-8 -*-
"""Codigo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WVhlFq9Un1Oh_staMqWrOYz6Dw50xU5T
"""

"""
<> Proyecto de tesis </>

Mariana Arriz Jorquiera
Francisco Franco Conroy

2020
"""

import simpy
import numpy as np
import itertools
import random
import math
import pandas as pd
import array as arr
from numpy import random

def f_simulation_day_X_simulation_time(simulation_time):
    """
    :param simulation_time:
    :return: day corresponding to the simulation time
    """
    day = None
    if simulation_time >= 0.0:
        day = int((simulation_time + 0.00001) // 86400) + 1
    return day

def f_transfort_simulation_time_in_HH_mm(simulation_time):
    day = f_simulation_day_X_simulation_time(simulation_time=simulation_time)
    hour = 24 * ((simulation_time - ((day - 1) * 86400)) / 86400)
    mins = 60 * (hour - int(hour))
    secs = 60 * (mins - int(mins))
    hour = str(int(hour))
    if hour.__len__() == 0:
        hour = '00' + hour
    elif hour.__len__() == 1:
        hour = '0' + hour
    mins = str(int(mins))
    if mins.__len__() == 0:
        mins = '00' + mins
    elif mins.__len__() == 1:
        mins = '0' + mins
    secs = str(round(secs))
    return hour + ':' + mins + ':' + secs

def proceso1_sinhub(env):

    global contadorsh_1

    contadorsh_1 +=1

    unidad1 = "Unidad %s" % contadorsh_1

    # Mina descarga unidad
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    print('%s descarga el dia %.0f' % (unidad1, dia), "a las ", hora)
    sh_dia_descarga.append(dia)
    sh_hora_descarga.append(hora)
    sh_arreglo_descarga.append(env.now)
    sh_unidades = unidad1
    sh_num_unidad.append(sh_unidades)
    yield env.timeout(10)
    print("%s sale de mina" % unidad1)

def unit_generator_1sinhub(env):
    for i in itertools.count():
        shtiempo_descargas = random.choice([43200, 86400, 129600, 172800, 216000, 259200, 302400, 345600],
                                           p=[0.22, 0.36, 0.04, 0.22, 0.03, 0.08, 0.02, 0.03])

        yield env.timeout(int(shtiempo_descargas))
        print("")
        print("Viaje %d" % (i+1))
        env.process(proceso1_sinhub(env))

def proceso2_sinhub(env):

    global contadorsh_2
    global contadorsh_3

    contadorsh_3 +=1
    unidad2 = "Unidad %s" % (contadorsh_3 + 5)

    # Solicitud de Yura
    print("Mina solicita unidad a Yura")
    print("Yura envía %s a mina" % unidad2)

    # Salida de Yura
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    print('%s sale de Yura el dia %.0f' % (unidad2, dia), "a las ", hora)
    sh_dia_salida_yura.append(dia)
    sh_hora_salida_yura.append(hora)

    # Lead time hasta mina
    yield env.timeout(86400 * 1.5)

    # Llegada de unidades a mina
    contadorsh_2 +=1
    unidad2 = "Unidad %s" % (contadorsh_2 + 5)
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    sh_arreglo_llegada_mina.append(int(env.now))
    sh_dia_llegada_mina.append(dia)
    sh_hora_llegada_mina.append(hora)
    print('%s llega a mina el dia %.0f' % (unidad2, dia), "a las ", hora)

def unit_generator_2sinhub(env):
    for i in itertools.count():
        shtiempo_pedidos = random.choice(
            [43200, 64800, 86400, 129600, 172800, 216000, 259200, 302400],
            p=[0.15, 0.085, 0.35, 0.09, 0.17, 0.1, 0.05, 0.005])

        yield env.timeout(int(shtiempo_pedidos))
        env.process(proceso2_sinhub(env))

def proceso_hub(env):
    global h_ttrayecto1
    global h_ttrayecto2
    global h_ttrayecto3
    global contadorch_1
    global contadorch_2
    global contadorch_3
    global contadortracto_mina
    global selecciontractos

    x = selecciontractos[0]
    selecciontractos.pop(0)

    contadorch_1 += 1
    tracto3 = 'Tracto %d' % (x)
    bombona1 = 'Bombona %d' % contadorch_1
    bombonaeng = 'Bombona %d' % (contadorch_1+2)
    bombona2 = 'Bombona %d' % (contadorch_1 + 1)
    bombona3 = 'Bombona %d' % (contadorch_1 + 5)

    tractohm1 = 'Tracto %d' % 1
    tractohm2 = 'Tracto %d' % 2
    if contadorch_1 % 2 == 0:
        tracto1 = tractohm2
        tracto2 = tractohm1
    else:
        tracto1 = tractohm1
        tracto2 = tractohm2

    # Descargan unidades
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    tractohm = tracto1
    bombona = bombona1
    print('%s descarga %s el dia %.0f' % (tractohm, bombona, dia), "a las ", hora)
    ch_dia_descarga.append(dia)
    ch_hora_descarga.append(hora)
    h_arreglo_descarga.append(env.now)
    h_unidades = ('%s' % bombona)
    h_num_unidad.append(h_unidades)

    # Mina solicita a hub
    print("Mina solicita bombona a hub")

    # Hub envía a mina
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    tractohm = tracto2  # tracto 2
    bombona = bombona2  # bombona 2
    h_ttrayecto2.append(tractohm)
    h_arrayviajes.append('Viaje %d' % (contadorch_1 + 1))
    print('Hub envía a mina %s con %s el dia %.0f' % (tractohm, bombona, dia), "a las ", hora)
    ch_dia_salida_hub_mina.append(dia)
    ch_hora_salida_hub_mina.append(hora)
    h_arreglo_salida_hub_mina.append(env.now)
    h_arreglo_salida_hub_mina_tracto.append(env.now)

    # Hub solicita de Yura
    print("Hub solicita unidad a Yura")

    # Programación pre salida (375 minutos)

    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    bombona = bombona3
    print('%s inicia programación pre salida con %s el dia %.0f' % (tracto3, bombona, dia), "a las ", hora)
    ch_dia_progpres.append(dia)
    ch_hora_progpres.append(hora)
    h_arreglo_progpres.append(env.now)

    # Llega unidad con bombona llena a mina
    yield env.timeout(14400)  # LT de Hub a mina son 4 horas
    contadorch_2 += 1
    bombona1 = 'Bombona %d' % contadorch_2
    bombona2 = 'Bombona %d' % (contadorch_2 + 1)
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    tractohm = tracto2
    bombona = bombona2
    print('%s y %s llegan a mina el dia %.0f' % (tractohm, bombona, dia), "a las ", hora)
    ch_dia_llegada_mina.append(dia)
    ch_hora_llegada_mina.append(hora)
    h_arreglo_llegada_mina.append(env.now)

    # Llega unidad con bombona vacía a hub
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    tractohm = tracto1
    bombona = bombona1
    print('%s y %s vacía llega al hub el dia %.0f e inicia desenganche' % (tractohm, bombona, dia), "a las ", hora)
    ch_dia_llegada_hub_vacia.append(dia)
    ch_hora_llegada_hub_vacia.append(hora)
    h_arreglo_llegada_hub_vacia.append(env.now)

    # Desenganche de bombona vacía y enganche de bombona llena (40 min)
    yield env.timeout(2400) #El cambio de tracto demora 40 min
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    bombona = bombona1
    bombonab = bombonaeng
    print('%s desenganchó %s vacía y enganchó %s llena el dia %.0f' % (tractohm, bombona, bombonab, dia), "a las ", hora)
    ch_dia_finct2.append(dia)
    ch_hora_finct2.append(hora)
    h_arreglo_finct2.append(env.now)
    ###bombona3

    # Programación pre salida
    yield env.timeout(12000) #480 minutos en la programación pre salida - 14400 del lt a mina - 2400 de cambio de tracto

    # Yura manda unidad

    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    bombona = bombona3
    h_ttrayecto1.append(tracto3)
    print('%s con %s salen de Yura el dia %.0f' % (tracto3, bombona, dia), "a las ", hora)
    ch_dia_salida_yura.append(dia)
    ch_hora_salida_yura.append(hora)
    h_arreglo_salida_yura.append(env.now)

    # Llega unidad con bombona llena al hub
    yield env.timeout(158400)  # LT de Yura a mina (158400)
    contadorch_3 += 1
    bombona3 = 'Bombona %d' % (contadorch_3 + 5)
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    bombona = bombona3
    h_ttrayecto3.append(tracto3)
    print('%s con %s llena llega a hub el dia %.0f e inicia desenganche' % (tracto3, bombona, dia), "a las ", hora)
    ch_dia_llegada_hub_llena.append(dia)
    ch_hora_llegada_hub_llena.append(hora)
    h_arreglo_llegada_hub_llena.append(env.now)

    # Desenganche de bombona llena y enganche de bombona vacía (40 min)
    yield env.timeout(2400) #El cambio de tracto demora 40 min
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    bombonab = bombona1
    print('%s desenganchó %s llena y enganchó %s vacía el dia %.0f' % (tracto3, bombona, bombonab, dia), "a las ", hora)
    ch_dia_finct1.append(dia)
    ch_hora_finct1.append(hora)
    h_arreglo_finct1.append(env.now)

    # Espera hasta las 4 am para salir
    yield env.timeout(28800) #Descansa 8 horas
    print("Conductor del %s descansa 8 horas" % tracto3)

    # Tracto se lleva bombona vacía
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    bombona = bombona1
    print('%s retira %s vacía del hub el dia %.0f' % (tracto3, bombona, dia), "a las ", hora)
    ch_dia_salida_hub_yura.append(dia)
    ch_hora_salida_hub_yura.append(hora)
    h_arreglo_salida_hub_yura.append(env.now)

    # Trayecto a almacén
    yield env.timeout(36000) #10 horas de camino al almacén
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    bombona = bombona1
    print('%s con %s llega a almacén el dia %.0f' % (tracto3, bombona, dia), "a las ", hora)
    ch_dia_llegada_almacen.append(dia)
    ch_hora_llegada_almacen.append(hora)
    h_arreglo_llegada_almacen.append(env.now)

    # Revisión de la unidad (30 min)
    yield env.timeout(1800) #30 minutos de revisión
    dia = f_simulation_day_X_simulation_time(env.now)
    hora = f_transfort_simulation_time_in_HH_mm(env.now)
    print('%s con %s son revisados el dia %.0f' % (tracto3, bombona, dia), "a las ", hora)
    ch_dia_revunid.append(dia)
    ch_hora_revunid.append(hora)
    h_arreglo_revunid.append(env.now)

    selecciontractos.insert(0,x)

def unit_generator_conhub(env):
    global h_arrayviajes

    yield env.timeout(14400)
    for i in itertools.count():
        htiempo_descargas = random.choice([43200, 86400, 129600, 172800, 216000, 259200, 302400, 345600],
         p=[0.22, 0.36, 0.04, 0.22, 0.03, 0.08, 0.02, 0.03])

        yield env.timeout(int(htiempo_descargas))
        print("")
        print("Viaje %d" % (i+1))
        env.process(proceso_hub(env))

if __name__ == '__main__':

    # Para correr la simulación
    num_days_simulation = 181  # Medio año
    num_segundos_dia = 24 * 60 * 60  # 86400: 24 horas * 60 minutos * 60 segundos
    sim_time = num_days_simulation * num_segundos_dia

    # SIN HUB

    contadorsh_1 = 0
    contadorsh_2 = 0
    contadorsh_3 = 0

    # Arreglos

    # DataFrame
    sh_num_unidad = []

    # Simulacion
    sh_dia_descarga = []
    sh_hora_descarga = []
    sh_arreglo_descarga = []

    sh_dia_salida_yura = []
    sh_hora_salida_yura = []

    sh_dia_llegada_mina = []
    sh_hora_llegada_mina = []
    sh_arreglo_llegada_mina = []

    # CON HUB

    contadorch_1 = 0
    contadorch_2 = 0
    contadorch_3 = 0
    contadortracto_mina = 2
    selecciontractos = [3,4,5,6,7,8,9,10]

    # Arreglos

    ch_dia_descarga = []
    ch_hora_descarga = []
    h_arreglo_descarga = []

    ch_dia_salida_hub_mina = []
    ch_hora_salida_hub_mina = []
    h_arreglo_salida_hub_mina = []
    h_arreglo_salida_hub_mina_tracto = []

    ch_dia_salida_yura = []
    ch_hora_salida_yura = []
    h_arreglo_salida_yura = []

    ch_dia_llegada_mina = []
    ch_hora_llegada_mina = []
    h_arreglo_llegada_mina = []

    ch_dia_llegada_hub_vacia = []
    ch_hora_llegada_hub_vacia = []
    h_arreglo_llegada_hub_vacia = []

    ch_dia_llegada_hub_llena = []
    ch_hora_llegada_hub_llena = []
    h_arreglo_llegada_hub_llena = []

    ch_dia_salida_hub_yura = []
    ch_hora_salida_hub_yura = []
    h_arreglo_salida_hub_yura = []

    ch_dia_progpres = []
    ch_hora_progpres = []
    h_arreglo_progpres = []

    ch_dia_finct1 = []
    ch_hora_finct1 = []
    h_arreglo_finct1 = []

    ch_dia_finct2 = []
    ch_hora_finct2 = []
    h_arreglo_finct2 = []

    ch_dia_llegada_almacen = []
    ch_hora_llegada_almacen = []
    h_arreglo_llegada_almacen = []

    ch_dia_revunid = []
    ch_hora_revunid = []
    h_arreglo_revunid = []

    h_arrayviajes = []
    h_num_unidad = []

    h_ttrayecto1 = []
    h_ttrayecto2 = []
    h_ttrayecto3 = []

    # SIMULACIÓN

    RANDOM_SEED = 43

    print("Inicio de simulacion sin Hub")
    print("")
    random.seed(RANDOM_SEED)
    env = simpy.Environment()
    env.process(unit_generator_1sinhub(env))
    env.process(unit_generator_2sinhub(env))
    env.run(until=sim_time)
    print("")
    print("Fin de simulacion sin Hub")

    print("")
    print("Inicio de simulación con Hub")
    print("")
    random.seed(RANDOM_SEED)
    env = simpy.Environment()
    env.process(unit_generator_conhub(env))
    env.run(until=sim_time)
    print("")
    print("Fin de simulación con Hub")

    # Ajustes para exportar datos

    # SIN HUB

    # Num unidad
    sh_num_unidad = sh_num_unidad[5:]

    # Descargas
    sh_dia_descarga = sh_dia_descarga[5:]
    sh_hora_descarga = sh_hora_descarga[5:]
    sh_arreglo_descarga = sh_arreglo_descarga[5:]

    # Salida de Yura
    sh_dia_salida_yura = sh_dia_salida_yura[:-8]
    sh_hora_salida_yura = sh_hora_salida_yura[:-8]

    # Llegada a mina
    sh_dia_llegada_mina = sh_dia_llegada_mina[:-6]
    sh_hora_llegada_mina = sh_hora_llegada_mina[:-6]
    sh_arreglo_llegada_mina = sh_arreglo_llegada_mina[:-6]

    # Horas cola
    sh_horascola = list(map(int.__sub__, sh_arreglo_descarga, sh_arreglo_llegada_mina))
    sh_horascola = np.divide(sh_horascola, 3600)

    # Dias cola
    sh_diascola = []
    sh_diassb = []

    for dato in sh_horascola:
        dato = math.ceil(dato / 24)
        sh_diascola.append(dato)

    # Dias sb
    for dato in sh_diascola:
        if dato < 3:
            diassb = 0
            sh_diassb.append(diassb)
        else:
            diassb = math.ceil(dato - 2)
            sh_diassb.append(diassb)

    sh_costosb = np.multiply(sh_diassb, 500)  # Costos sb
    sh_riesgosas = np.multiply(sh_diascola, 448)  # Riesgos sb

    # CON HUB

    #Para calcular cantidad de tractos:

    ch_bombona_almacen = h_num_unidad [:-6]
    ch_dia_salida_hub_almacen = ch_dia_salida_hub_yura[:-5]
    ch_hora_salida_hub_almacen = ch_hora_salida_hub_yura[:-5]
    ch_dia_llegada_almacen_tractos = ch_dia_llegada_almacen [:-5]
    ch_hora_llegada_almacen_tractos = ch_hora_llegada_almacen [:-5]
    ch_dia_revunid_tractos = ch_dia_revunid [:-5]
    ch_hora_revunid_tractos = ch_hora_revunid [:-5]

    # Bombonas

    h_num_unidad = h_num_unidad[5:-1]  # Arreglo unidades

    # Descargas
    ch_dia_descarga = ch_dia_descarga[5:-1]
    ch_hora_descarga = ch_hora_descarga[5:-1]
    h_arreglo_descarga = h_arreglo_descarga[5:-1]

    # Llegada al hub luego de descargas (bombona vacía)
    ch_dia_llegada_hub_vacia = ch_dia_llegada_hub_vacia[5:-1]
    ch_hora_llegada_hub_vacia = ch_hora_llegada_hub_vacia[5:-1]
    h_arreglo_llegada_hub_vacia = h_arreglo_llegada_hub_vacia[5:]

    # Salida del hub retirando bombona vacía
    ch_dia_salida_hub_yura = ch_dia_salida_hub_yura[5:]
    ch_hora_salida_hub_yura = ch_hora_salida_hub_yura[5:]
    h_arreglo_salida_hub_yura = h_arreglo_salida_hub_yura[5:]

    # Salida del hub a mina
    ch_dia_salida_hub_mina = ch_dia_salida_hub_mina[4:-2]
    ch_hora_salida_hub_mina = ch_hora_salida_hub_mina[4:-2]
    h_arreglo_salida_hub_mina = h_arreglo_salida_hub_mina[4:-2]
    h_arreglo_salida_hub_mina_tracto = h_arreglo_salida_hub_mina_tracto[6:-1]

    # Llegada a mina
    ch_dia_llegada_mina = ch_dia_llegada_mina[4:-2]
    ch_hora_llegada_mina = ch_hora_llegada_mina[4:-2]
    h_arreglo_llegada_mina = h_arreglo_llegada_mina[4:-2]

    # Salida de Yura
    ch_dia_salida_yura = ch_dia_salida_yura[:-6]
    ch_hora_salida_yura = ch_hora_salida_yura[:-6]
    h_arreglo_salida_yura = h_arreglo_salida_yura[:-6]

    # Llegada de Yura al hub
    ch_dia_llegada_hub_llena = ch_dia_llegada_hub_llena[:-5]
    ch_hora_llegada_hub_llena = ch_hora_llegada_hub_llena[:-5]
    h_arreglo_llegada_hub_llena = h_arreglo_llegada_hub_llena[:-5]

    # Tractos
    h_ttrayecto1 = h_ttrayecto1[:-6]
    h_ttrayecto2 = h_ttrayecto2[4:-2]
    h_ttrayecto3 = h_ttrayecto3[5:]

    # Viajes
    h_arrayviajes = h_arrayviajes[4:-2]

    # Programacion pre salida
    ch_dia_progpres = ch_dia_progpres[:-6]
    ch_hora_progpres = ch_hora_progpres[:-6]
    h_arreglo_progpres = h_arreglo_progpres[:-6]

    # Cambio de tracto 1
    ch_dia_finct1 = ch_dia_finct1[:-5]
    ch_hora_finct1 = ch_hora_finct1[:-5]
    h_arreglo_finct1 = h_arreglo_finct1[:-5]

    # Cambio de tracto 2
    ch_dia_finct2 = ch_dia_finct2[5:-1]
    ch_hora_finct2 = ch_hora_finct2[5:-1]
    h_arreglo_finct2 = h_arreglo_finct2[5:-1]

    # Llegada a almacén
    ch_dia_llegada_almacen = ch_dia_llegada_almacen [5:]
    ch_hora_llegada_almacen = ch_hora_llegada_almacen [5:]
    h_arreglo_llegada_almacen = h_arreglo_llegada_almacen [5:]

    # Revisión de unidad
    ch_dia_revunid = ch_dia_revunid [5:]
    ch_hora_revunid = ch_hora_revunid [5:]
    h_arreglo_revunid = h_arreglo_revunid [5:]

    # Horas en mina
    h_horas_cola = list(map(int.__sub__, h_arreglo_descarga, h_arreglo_llegada_mina))
    h_horas_cola = np.divide(h_horas_cola, 3600)

    h_dias_cola = []
    h_dias_sb = []

    for dato in h_horas_cola:
        dato = math.ceil(dato / 24)
        h_dias_cola.append(dato)

    for dato in h_dias_cola:
        if dato < 3:
            diassb = 0
            h_dias_sb.append(diassb)
        else:
            diassb = math.ceil(dato - 2)
            h_dias_sb.append(diassb)

    h_costos_sb_mina = np.multiply(h_dias_sb, 500)
    h_riesgos = np.multiply(h_dias_cola, 448)

    # Horas bombona llena en hub

    h_horas_cola_bombona_hub_llena = list(map(int.__sub__, h_arreglo_salida_hub_mina, h_arreglo_llegada_hub_llena))
    h_horas_cola_bombona_hub_llena = np.divide(h_horas_cola_bombona_hub_llena, 3600)

    hch = []
    h_dias_cola_bombona_hub_llena = []
    h_dias_sb_bombona_hub_llena = []

    for dato in h_horas_cola_bombona_hub_llena:
        hch.append(dato)

    for dato in hch:
        dato = math.ceil(dato / 24)
        h_dias_cola_bombona_hub_llena.append(dato)

    # Horas bombona vacía en hub

    h_horas_cola_bombona_hub_vacia = list(map(int.__sub__, h_arreglo_salida_hub_yura, h_arreglo_llegada_hub_vacia))
    h_horas_cola_bombona_hub_vacia = np.divide(h_horas_cola_bombona_hub_vacia, 3600)

    hbvacia_hub = []
    h_dias_cola_bombona_hub_vacia = []
    h_dias_sb_bombona_hub_vacia = []

    for dato in h_horas_cola_bombona_hub_vacia:
        hbvacia_hub.append(dato)

    for dato in hbvacia_hub:
        dato = math.ceil(dato / 24)
        h_dias_cola_bombona_hub_vacia.append(dato)

    # Horas tracto en hub

    h_horas_cola_tracto_hub = list(map(int.__sub__, h_arreglo_salida_hub_mina_tracto, h_arreglo_finct2))
    h_horas_cola_tracto_hub.append(0)
    h_horas_cola_tracto_hub = np.divide(h_horas_cola_tracto_hub, 3600)

    ht_hub = []
    h_dias_cola_tracto_hub = []
    h_dias_sb_tracto_hub = []

    for dato in h_horas_cola_tracto_hub:
        ht_hub.append(dato)

    for dato in ht_hub:
        dato = math.ceil(dato / 24)
        h_dias_cola_tracto_hub.append(dato)

    for dato in h_dias_cola_tracto_hub:
        if dato < 4:
            diassb = 0
            h_dias_sb_tracto_hub.append(diassb)
        else:
            diassb = math.ceil(dato - 2)
            h_dias_sb_tracto_hub.append(diassb)

    h_costos_sb_tracto_hub = np.multiply(h_dias_sb_tracto_hub, 500)

    # Exportando datos

    # SIN HUB

    df_SH = pd.DataFrame(
        {"Unidad": sh_num_unidad, "Dia salida Yura": sh_dia_salida_yura, "Hora salida Yura": sh_hora_salida_yura,
         "Dia llegada a mina": sh_dia_llegada_mina, "Hora llegada mina": sh_hora_llegada_mina,
         "Horas en cola": sh_horascola, "Dia descarga": sh_dia_descarga, "Hora descarga": sh_hora_descarga,
         "Dias de stand by": sh_diassb, "Costo de stand by": sh_costosb, "Riesgos asociados": sh_riesgosas})

    #df_SH.to_csv("Datos_por_unidad_sinhub1.csv", index=False)

    # CON HUB

    df_CH1 = pd.DataFrame(
        {"Bombona ": h_num_unidad, "Dia programacion pre salida": ch_dia_progpres,
         "Hora programacion pre salida": ch_hora_progpres, "Tracto Yura al hub": h_ttrayecto1,
         "Dia salida Yura": ch_dia_salida_yura, "Hora salida Yura": ch_hora_salida_yura,
         "Dia llegada hub llena": ch_dia_llegada_hub_llena, "Hora llegada hub llena": ch_hora_llegada_hub_llena,
         "Dia fin de cambio de tracto": ch_dia_finct1, "Hora fin de cambio de tracto": ch_hora_finct1,
         "Horas bombona en hub llena": hch,
         "Dias bombona en hub llena": h_dias_cola_bombona_hub_llena,
         "Tracto hub a mina": h_ttrayecto2, "Dia salida hub a mina": ch_dia_salida_hub_mina,
         "Hora salida Hub a mina": ch_hora_salida_hub_mina,
         "Dia llegada mina": ch_dia_llegada_mina, "Hora llegada mina": ch_hora_llegada_mina,
         "Horas cola en mina": h_horas_cola, "Dias en mina": h_dias_cola, "Dias de stand by en mina": h_dias_sb,
         "Costo de stand by en mina": h_costos_sb_mina, "Riesgos asociados": h_riesgos, "Dia descarga": ch_dia_descarga,
         "Hora descarga": ch_hora_descarga, "Dia llegada hub vacia": ch_dia_llegada_hub_vacia,
         "Hora llegada hub vacia": ch_hora_llegada_hub_vacia, "Dia fin de cambio de tracto 2": ch_dia_finct2,
         "Hora fin de cambio de tracto 2": ch_hora_finct2, "Horas bombona en hub vacia": hbvacia_hub,
         "Dias bombona en hub vacia": h_dias_cola_bombona_hub_vacia, "Tracto salida hub": h_ttrayecto3,
         "Dia llegada Almacen": ch_dia_llegada_almacen, "Hora llegada Almacen": ch_hora_llegada_almacen,
         "Dia revision unidad": ch_dia_revunid, "Hora revision unidad": ch_hora_revunid})
    df_CH1.to_csv("Datos_por_bombona_conhub.csv", index=False)

    df_CH2 = pd.DataFrame({"Viaje": h_arrayviajes, "Tracto": h_ttrayecto2, "Dia salida de hub": ch_dia_salida_hub_mina,
                           "Hora salida de Hub": ch_hora_salida_hub_mina, "Dia llegada a hub": ch_dia_llegada_hub_vacia,
                           "Hora llegada a hub": ch_hora_llegada_hub_vacia,"Dia fin de cambio de tracto 2": ch_dia_finct2,
         "Hora fin de cambio de tracto 2": ch_hora_finct2,
                           "Horas en cola": h_horas_cola_tracto_hub, "Dias en hub": h_dias_cola_tracto_hub,
                           "Dias de sb": h_dias_sb_tracto_hub, "Costos de sb": h_costos_sb_tracto_hub})
    df_CH2.to_csv("Datos_por_viaje_conhub.csv", index=False)

    df_CH3 = pd.DataFrame({"Tracto": h_ttrayecto1, "Bombona para hub": h_num_unidad,
    "Dia salida Yura": ch_dia_salida_yura, "Hora salida Yura": ch_hora_salida_yura,
    "Dia llegada hub": ch_dia_llegada_hub_llena, "Hora llegada hub": ch_hora_llegada_hub_llena,
    "Dia fin de desenganche": ch_dia_finct1, "Hora fin de desenganche": ch_hora_finct1,
    "Bombona para almacen": ch_bombona_almacen,"Dia salida hub": ch_dia_salida_hub_almacen,
    "Hora salida hub": ch_hora_salida_hub_almacen,
    "Dia llegada almacen": ch_dia_llegada_almacen_tractos, "Hora llegada almacen": ch_hora_llegada_almacen_tractos,
    "Dia revision unidad": ch_dia_revunid_tractos, "Hora revision unidad": ch_hora_revunid_tractos})

    df_CH3.to_csv("Datos_calculo_tractos_conhub.csv", index=False)